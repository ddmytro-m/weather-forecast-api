services:
  client:
    build:
      context: ./client
      dockerfile: ../docker/client/Dockerfile
      args:
        Mode: development
    volumes:
      - ./client:/app
      - /app/node_modules
    expose:
      - 5173
    command: npm run dev
    restart: always
    depends_on:
      - api
    networks:
      - nginx-network

  api:
    build:
      context: ./api
      dockerfile: ../docker/api/Dockerfile
    volumes:
      - ./api:/app
      - /app/node_modules
    environment:
      - API_KEY
      - DATABASE_URL
      - MAIL_ORGANISATION_NAME
      - MAIL_HOST
      - MAIL_PORT
      - MAIL_USER
      - MAIL_AUTH_METHOD
      - MAIL_USER_PASSWORD
      - MAIL_CLIENT_ID
      - MAIL_CLIENT_SECRET
      - MAIL_REFRESH_TOKEN
      - MAIL_ACCESS_TOKEN
      - REDIS_PORT
      - REDIS_PASSWORD
      - REDIS_USER
      - REDIS_USER_PASSWORD
    expose:
      - 3000
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - prisma-network
      - redis-network
      - nginx-network
  
  postgres:
    image: postgres:17
    restart: always
    environment:
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    expose:
      - 5432
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 2s
      retries: 20
    networks:
      - prisma-network
  
  redis:
    image: redis:8
    restart: always
    environment:
      - REDIS_PORT
      - REDIS_PASSWORD
      - REDIS_USER
      - REDIS_USER_PASSWORD
    expose:
      - ${REDIS_PORT}
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 20
      start_period: 5s
    networks:
      - redis-network


  nginx:
    image: nginx
    ports: 
      - 80:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - client
      - api
    restart: always
    networks:
      - nginx-network

volumes:
  pgdata:
    name: pgdata
  redisdata:
    name: redisdata

networks:
  prisma-network:
    name: prisma-network
  redis-network:
    name: redis-network
  nginx-network:
    name: nginx-network